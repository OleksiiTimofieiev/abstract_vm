Core:
-  AbstractVM is a machine that uses a stack to compute simple arithmetic expressions. These arithmetic expressions are provided to the machine as basic assembly programs.

Tech:

~ HashTable:
https://www.youtube.com/watch?v=bcQr7QKUo4M
https://www.youtube.com/watch?v=MfhjkfocRR0&list=PLTxllHdfUq4f7-uHOpxXnBUbsuLiI9pmb

~ Exceptions info:
https://dzone.com/articles/some-useful-facts-to-know-when-using-c-exceptions

~ factory class:
https://ru.wikipedia.org/wiki/Абстрактная_фабрика_(шаблон_проектирования)
https://en.wikibooks.org/wiki/C%2B%2B_Programming/Code/Design_Patterns
https://stackoverflow.com/questions/45788250/how-to-template-static-factory-method
http://ikeptwalking.com/factory-method-pattern/
https://www.codeproject.com/Articles/331304/Understanding-and-Implementing-Abstract-Factory
https://designingefficientsoftware.wordpress.com/2014/10/01/generic-class-factory-introduction-part-14/
https://blog.noctua-software.com/object-factory-c++.html
https://www.youtube.com/watch?v=XyNWEWUSa5E
http://cppnuts.com/factory-design-pattern-in-cpp/
https://sourcemaking.com/design_patterns/factory_method/cpp/1
https://sourcemaking.com/design_patterns/factory_method/cpp/2
https://stackoverflow.com/questions/333400/how-to-design-a-simple-c-object-factory
https://gist.github.com/facontidavide/c2d0fe6a29dc1e344e17799309ac2f1c
https://www.geeksforgeeks.org/class-template-multiple-parameters/
https://gist.github.com/mbains/3406184
https://gist.github.com/sacko87/3359911
https://codereview.stackexchange.com/questions/3248/generic-c-factory
https://mass-communicating.com/code/2013/05/01/generic_factories_cpp.html
https://stackoverflow.com/questions/4357500/c-abstract-factory-using-templates
https://stackoverflow.com/questions/29851559/c-factory-pattern-with-templates
http://programmerjoe.com/2007/03/18/the-abstract-factory-pattern-in-c/
http://www.drdobbs.com/conversations-abstract-factory-template/184403786
https://stackoverflow.com/questions/29141629/c-generic-factory-that-can-call-any-constructor
https://sourcemaking.com/design_patterns/abstract_factory/cpp/before-after
http://www.bogotobogo.com/DesignPatterns/abstractfactorymethod.php
https://www.codeproject.com/Articles/751869/Abstract-Factory-Step-by-Step-Implementation-in-Cp
http://www.di.unipi.it/~nids/docs/templates_vs_inheritance.html
https://www.researchgate.net/publication/269668943_Implementing_the_factory_pattern_with_the_help_of_Reflection
https://www.fluentcpp.com/2017/05/16/what-the-crtp-brings-to-code/
http://www.nirfriedman.com/2018/04/29/unforgettable-factory/
http://blog.fourthwoods.com/2011/06/04/factory-design-pattern-in-c/
https://stackoverflow.com/questions/5120768/how-to-implement-the-factory-method-pattern-in-c-correctly
http://cpp-reference.ru/patterns/creational-patterns/abstract-factory/
https://gist.github.com/pazdera/1102546
https://stackoverflow.com/questions/32800725/applying-abstract-factory-design-pattern-in-c
https://codereview.stackexchange.com/questions/166411/abstract-factory-design-pattern
http://www.cplusplus.com/forum/general/108256/
https://cppcodetips.wordpress.com/tag/abstract-factory-design-pattern-explained-with-c-sample/
https://en.wikibooks.org/wiki/C%2B%2B_Programming/Classes/Abstract_Classes

~ vector and fabric class:
- https://softwareengineering.stackexchange.com/questions/247245/a-vector-of-pointers-to-different-derived-classes-of-the-same-base-class
- https://stackoverflow.com/questions/15802006/how-can-i-create-objects-while-adding-them-into-a-vector
- constructor: https://www.geeksforgeeks.org/passing-vector-constructor-c/

~ vector and shared pointer:
https://stackoverflow.com/questions/19334889/vector-of-shared-pointers-memory-problems-after-clearing-the-vector

~ misc:
- line validity function (line, type: lexical / syntax / etc.); <- if not match -> invalid line; consider ;; as a command;
- in the end of the command there can be any amount of the spaces;
- general header for all classes, defines, etc;
- template class -> https://www.codeproject.com/Articles/257589/An-Idiots-Guide-to-Cplusplus-Templates-Part-1 / https://code-live.ru/post/cpp-templates-part-2/;
- conversion through a string;
- use templates;
- stoi / stof / stod;
- read this stuff -> https://www.codeproject.com/Articles/363338/Factory-Pattern-in-Cplusplus;
- For non commutative operations, consider the stack v1 on v2 on
stack_tail, the calculation in infix notation v2 op v1.
- c++ casts;
- underflow / overflow:
https://stackoverflow.com/questions/6360049/what-are-arithmetic-underflow-and-overflow-in-c;
- error management in correction form;
- https://www.youtube.com/watch?time_continue=583&v=7DG3kCDx53c
- virtual methods ->() + & (passing by reference) 


~ methods:
https://limbioliong.wordpress.com/2012/12/25/storing-c-objects-in-a-stl-vector-part-2/
https://www.safaribooksonline.com/library/view/c-cookbook/0596007612/ch06s05.html
https://stackoverflow.com/questions/35689763/how-do-you-make-a-vector-of-class-objects
https://stackoverflow.com/questions/15802006/how-can-i-create-objects-while-adding-them-into-a-vector
https://www.dreamincode.net/forums/topic/63358-store-class-objects-in-vector/
~ use of shared pointers:
http://www.cs.technion.ac.il/users/yechiel/c++-faq/container-of-smart-ptr.html
~ with not trivial constructor:
https://stackoverflow.com/questions/6142830/how-do-i-initialize-a-stl-vector-of-objects-who-themselves-have-non-trivial-cons
~ unique ptr aspects:
https://stackoverflow.com/questions/44386774/pushing-an-object-with-unique-ptr-into-vector-in-c

~ exceptions and s/o - stream ?

Bonus:
- usage;
- leaks flag;
- https://www.computerhope.com/unix/udc.htm;
- sort;
- max
- min https://stackoverflow.com/questions/26766136/how-to-get-min-or-max-element-in-a-vector-of-objects-in-c-based-on-some-field
- 1.
  2.
  3.
- 5 2 -
- different notations;
- animation;

Books:
https://vas3k.ru/blog/machine_learning/
* The C++ Programming Language, 4th Edition by Bjarne Stroustrup
* Effective C++: 55 Specific Ways to Improve Your Programs and Designs by Scott Meyers
* More Effective C++: 35 New Ways to Improve Your Programs and Designs by Scott Meyers
* Exceptional C++: 47 Engineering Puzzles, Programming Problems, and Solutions by Herb Sutter
* More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions by Herb Sutter
* Modern C++ Design: Generic Programming and Design Patterns Applied by Andrei Alexandrescu
* C++ Concurrency in Action: Practical Multithreading by Anthony Williams
* Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14 by Scott Meyers
* Algorithms (4th Edition) by Robert Sedgewick and Kevin Wayne
* Windows via C/C++ 5th Edition by Jeffrey M. Richter

Answers:
- reversed polish notation: 4 3 +;
