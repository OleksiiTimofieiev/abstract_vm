Core:
-  AbstractVM is a machine that uses a stack to compute simple arithmetic expressions. These arithmetic expressions are provided to the machine as basic assembly programs.

Tech:
- general header for all classes, defines, etc;
- refactor guru
- array passed by reference for the parser after the matching case with regex;
- getline with file and console input (how this works);
- https://codereview.stackexchange.com/questions/46946/user-input-and-reading-contents-of-file;
- https://www.google.com/search?client=safari&rls=en&q=getline+cin+or+file+c%2B%2B&ie=UTF-8&oe=UTF-8;
- https://stackoverflow.com/questions/22192042/c-cin-with-file-instead-of-user-input;
- while (TRUE) <- use bool;
- switch case();
- inherit from the std::exceptions;
- template class -> https://www.codeproject.com/Articles/257589/An-Idiots-Guide-to-Cplusplus-Templates-Part-1 / https://code-live.ru/post/cpp-templates-part-2/;
- https://softwareengineering.stackexchange.com/questions/247245/a-vector-of-pointers-to-different-derived-classes-of-the-same-base-class
- conversion through a string;
- use templates;
- stoi / stof / stod;
- git ignore;
- ali makefile;
- https://stackoverflow.com/questions/2842809/lexers-vs-parsers
- https://stackoverflow.com/questions/15802006/how-can-i-create-objects-while-adding-them-into-a-vector
- read this stuff -> https://www.codeproject.com/Articles/363338/Factory-Pattern-in-Cplusplus;
- For non commutative operations, consider the stack v1 on v2 on
stack_tail, the calculation in infix notation v2 op v1.
- lexer / parser;
- Groups rege
- Function from regex
- array of functions;
- stack of vectors;
- regular expressions and templates;
- c++ casts;
- try catch;
- parsing: https://stackoverflow.com/questions/27343186/what-is-the-best-way-to-parse-a-string-in-c;
- stack: 
http://codelessons.ru/cplusplus/realizaciya-steka-stack-v-c.html;
http://www.cyberforum.ru/cpp/thread1931303.html;
- underflow / overflow:
https://stackoverflow.com/questions/6360049/what-are-arithmetic-underflow-and-overflow-in-c;
- inherit from the stack class and add some features;
- factory method c++;
- error management in correction form;
- vector can be used, use as the type -> interface;
- regex;
- https://www.youtube.com/watch?time_continue=583&v=7DG3kCDx53c
- https://regex101.com
- https://www.youtube.com/watch?v=v_8rdQjOuxw
- https://www.regular-expressions.info/tutorialcnt.html
- https://www.youtube.com/watch?v=bWu8IJ_DasE
- Factory class, 5 private, uno public
- Class which works with exception
- virtual methods ->() + & (passing by reference) 
- array of strings;q

Bonus:
- usage;
- leaks flag;
- https://www.computerhope.com/unix/udc.htm;
- sort;
- max
- min
- 1.
  2.
  3.
- 5 2 -
- animation;

Books:
* The C++ Programming Language, 4th Edition by Bjarne Stroustrup
* Effective C++: 55 Specific Ways to Improve Your Programs and Designs by Scott Meyers
* More Effective C++: 35 New Ways to Improve Your Programs and Designs by Scott Meyers
* Exceptional C++: 47 Engineering Puzzles, Programming Problems, and Solutions by Herb Sutter
* More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions by Herb Sutter
* Modern C++ Design: Generic Programming and Design Patterns Applied by Andrei Alexandrescu
* C++ Concurrency in Action: Practical Multithreading by Anthony Williams
* Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14 by Scott Meyers
* Algorithms (4th Edition) by Robert Sedgewick and Kevin Wayne
* Windows via C/C++ 5th Edition by Jeffrey M. Richter

Answers:
- reversed polish notation: 4 3 +;
